# streamlit_chat.py
# ==================
# UI Chatbot tuy·ªÉn sinh (frontend) cho backend FastAPI.
# - Two-phase render: show user msg ngay, r·ªìi m·ªõi g·ªçi API + hi·ªán "ƒëang suy nghƒ©".
# - ƒê·ªçc BACKEND_URL & ADMIN_PASSWORD t·ª´ Streamlit Secrets ho·∫∑c ENV.
# - C√≥ tab Qu·∫£n tr·ªã: ping health, xem l·ªãch s·ª≠ & feedback, t·∫£i CSV.
# - Ch·ªëng treo: retry c√≥ backoff, timeout r√µ r√†ng, th√¥ng b√°o l·ªói th√¢n thi·ªán.

from __future__ import annotations
import os
import json
import uuid
import time
from datetime import datetime
from typing import Dict, Any, List, Optional

import requests
import pandas as pd
import streamlit as st

# -----------------------
# C·∫•u h√¨nh & ti·ªán √≠ch
# -----------------------

st.set_page_config(
    page_title="Chatbot AI t∆∞ v·∫•n tuy·ªÉn sinh 10 - THPT Marie Curie",
    page_icon="ü§ñ",
    layout="wide",
)

def _normalize_backend(url: str) -> str:
    """
    Chu·∫©n ho√° BACKEND_URL (th√™m http/https n·∫øu thi·∫øu, b·ªè d·∫•u / cu·ªëi).
    """
    if not url:
        return "http://localhost:8000"
    url = url.strip()
    # s·ª≠a nh·∫ßm 'https:/' th√†nh 'https://'
    if url.startswith("https:/") and not url.startswith("https://"):
        url = url.replace("https:/", "https://", 1)
    if url.startswith("http:/") and not url.startswith("http://"):
        url = url.replace("http:/", "http://", 1)
    if not (url.startswith("http://") or url.startswith("https://")):
        url = "https://" + url.lstrip("/")
    return url.rstrip("/")

BACKEND_URL = _normalize_backend(
    st.secrets.get("BACKEND_URL", os.getenv("BACKEND_URL", "http://localhost:8000"))
)
ADMIN_PASSWORD = st.secrets.get("ADMIN_PASSWORD", os.getenv("ADMIN_PASSWORD", ""))

DEFAULT_HEADERS = {"Content-Type": "application/json"}

def post_json(
    path: str,
    payload: Dict[str, Any],
    timeout: int = 60,
    retries: int = 2,
    backoff: float = 0.8,
) -> Optional[Dict[str, Any]]:
    """
    G·ªçi POST JSON t·ªõi backend v·ªõi retry tuy·∫øn t√≠nh + backoff.
    Tr·∫£ v·ªÅ dict JSON ho·∫∑c None n·∫øu l·ªói.
    """
    url = f"{BACKEND_URL}{path}"
    last_err = None
    for attempt in range(retries + 1):
        try:
            resp = requests.post(url, headers=DEFAULT_HEADERS, json=payload, timeout=timeout)
            resp.raise_for_status()
            return resp.json()
        except Exception as e:
            last_err = e
            if attempt < retries:
                # backoff nh·∫π ƒë·ªÉ tr√°nh flood khi backend ƒëang warmup
                time.sleep(backoff * (attempt + 1))
            else:
                st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi backend. Ki·ªÉm tra BACKEND_URL trong Secrets ho·∫∑c th·ª≠ l·∫°i sau.")
                with st.expander("Chi ti·∫øt l·ªói", expanded=False):
                    st.code(f"{e}", language="bash")
                return None
    return None

def get_json(path: str, timeout: int = 30) -> Optional[Dict[str, Any]]:
    try:
        resp = requests.get(f"{BACKEND_URL}{path}", timeout=timeout)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        st.warning(f"L·ªói khi g·ªçi {path}: {e}")
        return None

def do_rerun():
    try:
        st.rerun()
    except Exception:
        st.experimental_rerun()

# -----------------------
# Session state
# -----------------------

if "session_id" not in st.session_state:
    st.session_state.session_id = f"web-{uuid.uuid4().hex[:8]}"

if "messages" not in st.session_state:
    # m·ªói item: {"role": "user"|"assistant", "content": str, "ts": iso}
    st.session_state.messages: List[Dict[str, Any]] = []

if "awaiting_response" not in st.session_state:
    st.session_state.awaiting_response = False

if "last_user_text" not in st.session_state:
    st.session_state.last_user_text: Optional[str] = None

if "last_answer" not in st.session_state:
    st.session_state.last_answer: Optional[str] = None

# -----------------------
# Header
# -----------------------

st.markdown(
    """
    <h1 style="margin-top:0">ü§ñ Chatbot AI ‚Äî tr·ª£ l√≠ ·∫£o h·ªó tr·ª£ t∆∞ v·∫•n tuy·ªÉn sinh 10 ‚Äî THPT Marie Curie</h1>
    """,
    unsafe_allow_html=True,
)

with st.sidebar:
    st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh")
    st.write(f"**Backend**: `{BACKEND_URL}`")
    if st.button("Ping /health"):
        health = get_json("/health")
        st.success(health if health else {"status": "fail"})

tab_user, tab_admin = st.tabs(["üë©‚Äçüéì Ng∆∞·ªùi d√πng", "üõ† Qu·∫£n tr·ªã"])

# =========================================================
# TAB NG∆Ø·ªúI D√ôNG (Chat)
# =========================================================
with tab_user:
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i theo chu·∫©n chat
    for msg in st.session_state.messages:
        role = msg.get("role", "assistant")
        with st.chat_message(role):
            st.markdown(msg.get("content", ""))

    # √î nh·∫≠p chat
    user_text = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n‚Ä¶")

    # -------- PHA 1: nh·∫≠n input -> append -> rerun ƒë·ªÉ v·∫Ω ngay --------
    if user_text:
        st.session_state.messages.append(
            {"role": "user", "content": user_text, "ts": datetime.utcnow().isoformat()}
        )
        st.session_state.awaiting_response = True
        st.session_state.last_user_text = user_text
        do_rerun()

    # -------- PHA 2: ƒë√£ hi·ªÉn th·ªã c√¢u h·ªèi; gi·ªù g·ªçi backend + thinking --------
    if st.session_state.awaiting_response and st.session_state.last_user_text:
        with st.chat_message("assistant"):
            placeholder = st.empty()
            status_ctx = None
            # st.status c√≥ t·ª´ Streamlit >=1.26; fallback spinner n·∫øu b·∫£n c≈©
            try:
                status_ctx = placeholder.status("ü§î ƒêang suy nghƒ©‚Ä¶", state="running")
            except Exception:
                status_ctx = st.spinner("ü§î ƒêang suy nghƒ©‚Ä¶")

            with status_ctx:
                data = post_json(
                    "/chat",
                    {
                        "message": st.session_state.last_user_text,
                        "user_id": st.session_state.session_id,
                    },
                    timeout=60,
                    retries=2,
                    backoff=0.8,
                )
                # Chu·∫©n ho√° kho√° tr·∫£ v·ªÅ t·ª´ backend
                answer = None
                if isinstance(data, dict):
                    answer = (
                        data.get("answer")
                        or data.get("reply")
                        or data.get("response")
                        or data.get("message")
                    )
                if not answer:
                    answer = "Xin l·ªói, hi·ªán ch∆∞a c√≥ ph·∫£n h·ªìi."

            # thay ‚Äòƒëang suy nghƒ©‚Äô b·∫±ng c√¢u tr·∫£ l·ªùi
            try:
                placeholder.empty()
            except Exception:
                pass
            st.markdown(answer)

        # L∆∞u & reset c·ªù
        st.session_state.messages.append(
            {"role": "assistant", "content": answer, "ts": datetime.utcnow().isoformat()}
        )
        st.session_state.last_answer = answer
        st.session_state.awaiting_response = False
        st.session_state.last_user_text = None
        do_rerun()

    # ---------------------------------------------
    # Ph·∫£n h·ªìi üëç üëé cho c√¢u tr·∫£ l·ªùi cu·ªëi c√πng
    # ---------------------------------------------
    if st.session_state.messages and st.session_state.messages[-1]["role"] == "assistant":
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üëç H√†i l√≤ng", use_container_width=True):
                post_json(
                    "/feedback",
                    {
                        "rating": 1,
                        "question": st.session_state.messages[-2]["content"] if len(st.session_state.messages) >= 2 else "",
                        "answer": st.session_state.messages[-1]["content"],
                        "user_id": st.session_state.session_id,
                    },
                    timeout=20,
                )
                st.success("C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n!")
        with col2:
            if st.button("üëé Ch∆∞a t·ªët", use_container_width=True):
                post_json(
                    "/feedback",
                    {
                        "rating": -1,
                        "question": st.session_state.messages[-2]["content"] if len(st.session_state.messages) >= 2 else "",
                        "answer": st.session_state.messages[-1]["content"],
                        "user_id": st.session_state.session_id,
                    },
                    timeout=20,
                )
                st.info("ƒê√£ ghi nh·∫≠n g√≥p √Ω!")

# =========================================================
# TAB QU·∫¢N TR·ªä
# =========================================================
with tab_admin:
    st.caption("Y√™u c·∫ßu m·∫≠t kh·∫©u qu·∫£n tr·ªã ƒë·ªÉ xem d·ªØ li·ªáu h·ªá th·ªëng.")
    pwd = st.text_input("M·∫≠t kh·∫©u qu·∫£n tr·ªã", type="password")
    if ADMIN_PASSWORD and pwd != ADMIN_PASSWORD:
        st.warning("Sai m·∫≠t kh·∫©u.")
        st.stop()
    elif not ADMIN_PASSWORD:
        st.info("Ch∆∞a thi·∫øt l·∫≠p ADMIN_PASSWORD trong Secrets/ENV. V·∫´n cho ph√©p truy c·∫≠p t·∫°m th·ªùi.")

    st.subheader("1) T√¨nh tr·∫°ng d·ªãch v·ª•")
    c1, c2, c3 = st.columns(3)
    with c1:
        if st.button("üîÑ Ping /health", use_container_width=True):
            st.json(get_json("/health") or {"status": "fail"})
    with c2:
        if st.button("üßπ Xo√° l·ªãch s·ª≠ phi√™n hi·ªán t·∫°i", use_container_width=True):
            st.session_state.messages = []
            st.success("ƒê√£ xo√° h·ªôi tho·∫°i tr√™n UI.")
    with c3:
        st.write(f"Session ID: `{st.session_state.session_id}`")

    st.subheader("2) L·ªãch s·ª≠ h·ªôi tho·∫°i (server)")
    if st.button("üìú T·∫£i `/history`", use_container_width=True):
        data = get_json("/history")  # backend n√™n tr·∫£ list[dict] ho·∫∑c {"history": [...]}
        rows = data.get("history") if isinstance(data, dict) and "history" in data else data
        if isinstance(rows, list) and rows:
            df = pd.DataFrame(rows)
            st.dataframe(df, use_container_width=True)
            st.download_button(
                "‚¨áÔ∏è T·∫£i CSV",
                df.to_csv(index=False).encode("utf-8"),
                file_name="chat_history.csv",
                mime="text/csv",
                use_container_width=True,
            )
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.")

    st.subheader("3) Feedback ng∆∞·ªùi d√πng (server)")
    if st.button("üó≥Ô∏è T·∫£i `/feedbacks`", use_container_width=True):
        data = get_json("/feedbacks")
        rows = data.get("feedbacks") if isinstance(data, dict) and "feedbacks" in data else data
        if isinstance(rows, list) and rows:
            df = pd.DataFrame(rows)
            st.dataframe(df, use_container_width=True)
            st.download_button(
                "‚¨áÔ∏è T·∫£i CSV",
                df.to_csv(index=False).encode("utf-8"),
                file_name="feedbacks.csv",
                mime="text/csv",
                use_container_width=True,
            )
        else:
            st.info("Kh√¥ng c√≥ feedback.")

# -----------------------
# Footer nh·ªè
# -----------------------
st.write("")
st.caption(
    "¬© 2025 ‚Äî Chatbot t∆∞ v·∫•n tuy·ªÉn sinh l·ªõp 10. "
    "N·∫øu g·∫∑p l·ªói, h√£y ki·ªÉm tra **Secrets ‚Üí BACKEND_URL**, v√† ƒë·∫£m b·∫£o backend `/health` tr·∫£ `ok`."
)
