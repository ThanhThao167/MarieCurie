# streamlit_chat.py
# ==================
# UI Chatbot tuy·ªÉn sinh l·ªõp 10 ‚Äì THPT Marie Curie (frontend Streamlit)
# - Two-phase render (hi·ªÉn th·ªã c√¢u h·ªèi ngay + ‚Äúü§î ƒêang suy nghƒ©‚Ä¶‚Äù)
# - ƒê·ªçc BACKEND_URL, ADMIN_PASSWORD t·ª´ Secrets/ENV
# - Tab Qu·∫£n tr·ªã: health, l·ªãch s·ª≠, feedbacks, t·∫£i CSV
# - C√≥ l·ªùi ch√†o ban ƒë·∫ßu d∆∞·ªõi d·∫°ng bong b√≥ng chat

from __future__ import annotations
import os, uuid, time
from datetime import datetime
from typing import Dict, Any, List, Optional

import requests
import pandas as pd
import streamlit as st

# =============== C·∫•u h√¨nh trang ===============
st.set_page_config(
    page_title="Chatbot AI t∆∞ v·∫•n tuy·ªÉn sinh 10 - THPT Marie Curie",
    page_icon="ü§ñ",
    layout="wide",
)

# =============== H·∫±ng s·ªë & ti·ªán √≠ch ===============
GREETING = (
    "Ch√†o b·∫°n, t√¥i l√† chatbot h·ªó tr·ª£ tuy·ªÉn sinh 10, "
    "s·∫µn s√†ng tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi c·ªßa b·∫°n li√™n quan ƒë·∫øn v·∫•n ƒë·ªÅ tuy·ªÉn sinh "
    "t·∫°i tr∆∞·ªùng THPT Marie Curie."
)

def _normalize_backend(url: str) -> str:
    if not url:
        return "http://localhost:8000"
    url = url.strip()
    if url.startswith("https:/") and not url.startswith("https://"):
        url = url.replace("https:/", "https://", 1)
    if url.startswith("http:/") and not url.startswith("http://"):
        url = url.replace("http:/", "http://", 1)
    if not (url.startswith("http://") or url.startswith("https://")):
        url = "https://" + url.lstrip("/")
    return url.rstrip("/")

BACKEND_URL = _normalize_backend(
    st.secrets.get("BACKEND_URL", os.getenv("BACKEND_URL", "http://localhost:8000"))
)
ADMIN_PASSWORD = st.secrets.get("ADMIN_PASSWORD", os.getenv("ADMIN_PASSWORD", ""))

DEFAULT_HEADERS = {"Content-Type": "application/json"}

def post_json(
    path: str,
    payload: Dict[str, Any],
    timeout: int = 60,
    retries: int = 2,
    backoff: float = 0.8,
) -> Optional[Dict[str, Any]]:
    """POST JSON t·ªõi backend v·ªõi retry/backoff."""
    url = f"{BACKEND_URL}{path}"
    last_err = None
    for attempt in range(retries + 1):
        try:
            resp = requests.post(url, headers=DEFAULT_HEADERS, json=payload, timeout=timeout)
            resp.raise_for_status()
            return resp.json()
        except Exception as e:
            last_err = e
            if attempt < retries:
                time.sleep(backoff * (attempt + 1))
            else:
                st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi backend. Ki·ªÉm tra BACKEND_URL trong Secrets ho·∫∑c th·ª≠ l·∫°i sau.")
                with st.expander("Chi ti·∫øt l·ªói", expanded=False):
                    st.code(f"{e}", language="bash")
                return None
    return None

def get_json(path: str, timeout: int = 30) -> Optional[Dict[str, Any]]:
    try:
        resp = requests.get(f"{BACKEND_URL}{path}", timeout=timeout)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        st.warning(f"L·ªói khi g·ªçi {path}: {e}")
        return None

def do_rerun():
    try:
        st.rerun()
    except Exception:
        st.experimental_rerun()

# =============== Session state ===============
if "session_id" not in st.session_state:
    st.session_state.session_id = f"web-{uuid.uuid4().hex[:8]}"

if "messages" not in st.session_state:
    # m·ªói item: {"role": "user"/"assistant", "content": str, "ts": iso}
    st.session_state.messages: List[Dict[str, Any]] = []

if "awaiting_response" not in st.session_state:
    st.session_state.awaiting_response = False

if "last_user_text" not in st.session_state:
    st.session_state.last_user_text: Optional[str] = None

if "greeted" not in st.session_state:
    st.session_state.greeted = False

# Th√™m l·ªùi ch√†o 1 l·∫ßn khi m·ªü app
if not st.session_state.messages and not st.session_state.greeted:
    st.session_state.messages.append(
        {"role": "assistant", "content": GREETING, "ts": datetime.utcnow().isoformat()}
    )
    st.session_state.greeted = True

# =============== Header & Sidebar ===============
st.markdown(
    """
    <h1 style="margin-top:0">ü§ñ Chatbot AI ‚Äî tr·ª£ l√≠ ·∫£o h·ªó tr·ª£ t∆∞ v·∫•n tuy·ªÉn sinh 10 ‚Äî THPT Marie Curie</h1>
    """,
    unsafe_allow_html=True,
)

with st.sidebar:
    st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh")
    st.write(f"**Backend**: `{BACKEND_URL}`")
    if st.button("Ping /health"):
        health = get_json("/health")
        if health:
            st.success(health)
        else:
            st.error({"status": "fail"})

tab_user, tab_admin = st.tabs(["üë©‚Äçüéì Ng∆∞·ªùi d√πng", "üõ† Qu·∫£n tr·ªã"])

# ==========================
# TAB: NG∆Ø·ªúI D√ôNG (CHAT)
# ==========================
with tab_user:
    # Hi·ªÉn th·ªã l·ªãch s·ª≠
    for msg in st.session_state.messages:
        with st.chat_message(msg.get("role", "assistant")):
            st.markdown(msg.get("content", ""))

    # √î nh·∫≠p
    user_text = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n‚Ä¶")

    # PHA 1: nh·∫≠n input -> append -> rerun ƒë·ªÉ hi·ªÉn th·ªã ngay
    if user_text:
        st.session_state.messages.append(
            {"role": "user", "content": user_text, "ts": datetime.utcnow().isoformat()}
        )
        st.session_state.awaiting_response = True
        st.session_state.last_user_text = user_text
        do_rerun()

    # PHA 2: ƒë√£ v·∫Ω c√¢u h·ªèi; g·ªçi backend + hi·ªÉn th·ªã ‚Äúƒëang suy nghƒ©‚Äù
    if st.session_state.awaiting_response and st.session_state.last_user_text:
        with st.chat_message("assistant"):
            # status (Streamlit >=1.26); fallback spinner n·∫øu b·∫£n c≈©
            use_status = hasattr(st, "status")
            ctx_mgr = st.status("ü§î ƒêang suy nghƒ©‚Ä¶", state="running") if use_status else st.spinner("ü§î ƒêang suy nghƒ©‚Ä¶")
            with ctx_mgr:
                data = post_json(
                    "/chat",
                    {
                        "message": st.session_state.last_user_text,
                        "user_id": st.session_state.session_id,
                    },
                    timeout=60, retries=2, backoff=0.8,
                )
                answer = None
                if isinstance(data, dict):
                    answer = data.get("answer") or data.get("reply") or data.get("response") or data.get("message")
                if not answer:
                    answer = "Xin l·ªói, hi·ªán ch∆∞a c√≥ ph·∫£n h·ªìi."
            st.markdown(answer)

        # L∆∞u & reset
        st.session_state.messages.append(
            {"role": "assistant", "content": answer, "ts": datetime.utcnow().isoformat()}
        )
        st.session_state.awaiting_response = False
        st.session_state.last_user_text = None
        do_rerun()

    # Ph·∫£n h·ªìi üëç üëé cho c√¢u tr·∫£ l·ªùi cu·ªëi
    if st.session_state.messages and st.session_state.messages[-1]["role"] == "assistant":
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üëç H√†i l√≤ng", use_container_width=True):
                # c·ªë g·∫Øng l·∫•y c√¢u h·ªèi tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
                q = ""
                if len(st.session_state.messages) >= 2 and st.session_state.messages[-2]["role"] == "user":
                    q = st.session_state.messages[-2]["content"]
                post_json("/feedback", {"rating": 1, "question": q,
                                        "answer": st.session_state.messages[-1]["content"],
                                        "user_id": st.session_state.session_id}, timeout=20)
                st.toast("C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n!", icon="‚úÖ")
        with col2:
            if st.button("üëé Ch∆∞a t·ªët", use_container_width=True):
                q = ""
                if len(st.session_state.messages) >= 2 and st.session_state.messages[-2]["role"] == "user":
                    q = st.session_state.messages[-2]["content"]
                post_json("/feedback", {"rating": -1, "question": q,
                                        "answer": st.session_state.messages[-1]["content"],
                                        "user_id": st.session_state.session_id}, timeout=20)
                st.toast("ƒê√£ ghi nh·∫≠n g√≥p √Ω!", icon="‚ÑπÔ∏è")

# ==========================
# TAB: QU·∫¢N TR·ªä
# ==========================
with tab_admin:
    st.caption("Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã ƒë·ªÉ xem d·ªØ li·ªáu h·ªá th·ªëng.")
    pwd = st.text_input("M·∫≠t kh·∫©u qu·∫£n tr·ªã", type="password")
    if ADMIN_PASSWORD and pwd != ADMIN_PASSWORD:
        st.warning("Sai m·∫≠t kh·∫©u.")
        st.stop()
    elif not ADMIN_PASSWORD:
        st.info("Ch∆∞a thi·∫øt l·∫≠p ADMIN_PASSWORD trong Secrets/ENV. T·∫°m cho ph√©p truy c·∫≠p.")

    st.subheader("1) T√¨nh tr·∫°ng d·ªãch v·ª•")
    c1, c2, c3 = st.columns(3)
    with c1:
        if st.button("üîÑ Ping /health", use_container_width=True):
            st.json(get_json("/health") or {"status": "fail"})
    with c2:
        if st.button("üßπ Xo√° l·ªãch s·ª≠ h·ªôi tho·∫°i (UI)", use_container_width=True):
            st.session_state.messages = []
            st.success("ƒê√£ xo√° h·ªôi tho·∫°i tr√™n UI.")
    with c3:
        st.write(f"Session ID: `{st.session_state.session_id}`")

    st.subheader("2) L·ªãch s·ª≠ h·ªôi tho·∫°i (server)")
    if st.button("üìú T·∫£i `/history`", use_container_width=True):
        data = get_json("/history")
        rows = data.get("history") if isinstance(data, dict) and "history" in data else data
        if isinstance(rows, list) and rows:
            df = pd.DataFrame(rows)
            st.dataframe(df, use_container_width=True)
            st.download_button(
                "‚¨áÔ∏è T·∫£i CSV",
                df.to_csv(index=False).encode("utf-8"),
                file_name="chat_history.csv",
                mime="text/csv",
                use_container_width=True,
            )
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.")

    st.subheader("3) Feedback ng∆∞·ªùi d√πng (server)")
    if st.button("üó≥Ô∏è T·∫£i `/feedbacks`", use_container_width=True):
        data = get_json("/feedbacks")
        rows = data.get("feedbacks") if isinstance(data, dict) and "feedbacks" in data else data
        if isinstance(rows, list) and rows:
            df = pd.DataFrame(rows)
            st.dataframe(df, use_container_width=True)
            st.download_button(
                "‚¨áÔ∏è T·∫£i CSV",
                df.to_csv(index=False).encode("utf-8"),
                file_name="feedbacks.csv",
                mime="text/csv",
                use_container_width=True,
            )
        else:
            st.info("Kh√¥ng c√≥ feedback.")

# =============== Footer ===============
st.write("")
st.caption(
    "¬© 2025 ‚Äî Chatbot t∆∞ v·∫•n tuy·ªÉn sinh l·ªõp 10. "
    "N·∫øu g·∫∑p l·ªói, h√£y ki·ªÉm tra **Secrets ‚Üí BACKEND_URL**, v√† ƒë·∫£m b·∫£o backend `/health` tr·∫£ `ok`."
)
