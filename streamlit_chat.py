# streamlit_chat.py
# Frontend Streamlit cho Chatbot tuy·ªÉn sinh 10 (Cloud-ready)

import os
import uuid
import requests
import pandas as pd
from datetime import datetime
from contextlib import suppress
import streamlit as st

# =========================
# 0) Page config & CSS
# =========================
st.set_page_config(
    page_title="Chatbot AI- tr·ª£ l√≠ ·∫£o h·ªó tr·ª£ t∆∞ v·∫•n tuy·ªÉn sinh 10- THPT Marie Curie",
    page_icon="ü§ñ",
    layout="wide",
)

# Tabs + buttons + input styling
st.markdown(
    """
<style>
/* Tabs: n·ªÅn cho tab ƒë∆∞·ª£c ch·ªçn */
div.stTabs [data-baseweb="tab-list"] { gap: .25rem; }
div.stTabs [data-baseweb="tab-list"] button[role="tab"] {
  background-color: transparent; border: 1px solid transparent; border-bottom: none;
  padding: .5rem 1rem; margin: 0; border-radius: 10px 10px 0 0;
}
div.stTabs [data-baseweb="tab-list"] button[role="tab"][aria-selected="true"] {
  background-color: rgba(31,111,235,0.2); border-color: rgba(31,111,235,0.35); color: white;
}
div.stTabs [data-baseweb="tab-list"] button p { font-size: 1rem; font-weight: 600; }

/* Chat input vi·ªÅn n·ªïi b·∫≠t nh·∫π */
.stChatInput textarea {
  border: 2px solid rgba(255,255,255,0.15) !important;
  border-radius: 12px !important;
}

/* Thu nh·ªè padding n√∫t feedback */
.small-btn > button { padding: .25rem .5rem; min-width: 0; border-radius: 10px; }
</style>
""",
    unsafe_allow_html=True,
)

# =========================
# 1) Config from ENV/Secrets
# =========================
BACKEND_URL = os.getenv("BACKEND_URL") or st.secrets.get("BACKEND_URL", "http://localhost:8000")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD") or st.secrets.get("ADMIN_PASSWORD", "admin123")
DEFAULT_TIMEOUT = 60  # seconds

def _join(path: str) -> str:
    return f"{BACKEND_URL.rstrip('/')}/{path.lstrip('/')}"

def post_json(path: str, payload: dict):
    r = requests.post(_join(path), json=payload, timeout=DEFAULT_TIMEOUT)
    r.raise_for_status()
    try:
        return r.json()
    except Exception:
        return {"text": r.text}

def post_form(path: str, form: dict):
    r = requests.post(_join(path), data=form, timeout=DEFAULT_TIMEOUT)
    r.raise_for_status()
    try:
        return r.json()
    except Exception:
        return {"text": r.text}

def get_json(path: str):
    try:
        r = requests.get(_join(path), timeout=DEFAULT_TIMEOUT)
        if r.status_code == 404:
            return None
        r.raise_for_status()
        try:
            return r.json()
        except Exception:
            return {"text": r.text}
    except requests.RequestException:
        return None

def get_csv_as_df(path: str):
    try:
        return pd.read_csv(_join(path))
    except Exception:
        return None

# =========================
# 2) Session state
# =========================
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())
if "messages" not in st.session_state:
    st.session_state.messages = []
if "last_reply" not in st.session_state:
    st.session_state.last_reply = ""

# =========================
# 3) Tabs
# =========================
tab_user, tab_admin = st.tabs(["üë®‚Äçüéì Ng∆∞·ªùi d√πng", "üõ† Qu·∫£n tr·ªã"])

# =========================
# 4) Tab Ng∆∞·ªùi d√πng (Chat)
# =========================
with tab_user:
    st.title("ü§ñ Chatbot AI- tr·ª£ l√≠ ·∫£o h·ªó tr·ª£ t∆∞ v·∫•n tuy·ªÉn sinh 10- THPT Marie Curie")

    # L·ªùi ch√†o ƒë·∫ßu ti√™n
    if len(st.session_state.messages) == 0:
        with st.chat_message("assistant"):
            st.markdown(
                "CH√†o b·∫°n! m√¨nh l√† chatbot tuy·ªÉn sinh 10, s·∫µn s√†ng gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc c·ªßa b·∫°n. "
                "H√£y ƒë·∫∑t c√¢u h·ªèi cho m√¨nh nh√©!"
            )

    # ---- hi·ªÉn th·ªã to√†n b·ªô l·ªãch s·ª≠ tr∆∞·ªõc ----
    for i, msg in enumerate(st.session_state.messages):
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])
        # hi·ªán 2 n√∫t feedback ch·ªâ cho **tin nh·∫Øn tr·ª£ l√≠ cu·ªëi c√πng**
        is_last_assistant = (
            msg["role"] == "assistant" and i == len(st.session_state.messages) - 1
        )
        if is_last_assistant:
            # t√¨m c√¢u h·ªèi li·ªÅn tr∆∞·ªõc (n·∫øu c√≥)
            prev_q = ""
            if i >= 1 and st.session_state.messages[i-1]["role"] == "user":
                prev_q = st.session_state.messages[i-1]["content"]

            # ƒë·∫∑t hai n√∫t c√πng m·ªôt h√†ng, s√°t nhau
            c1, c2, _ = st.columns([0.07, 0.07, 0.86])
            with c1:
                if st.button("üëç", key=f"fb_up_{i}", help="H√†i l√≤ng", type="secondary", kwargs=None):
                    with suppress(Exception):
                        post_form("/feedback", {
                            "session_id": st.session_state.session_id,
                            "question": prev_q,
                            "answer": msg["content"],
                            "rating": "up",
                        })
                        st.success("ƒê√£ g·ª≠i ph·∫£n h·ªìi üëç")
            with c2:
                if st.button("üëé", key=f"fb_dn_{i}", help="Ch∆∞a t·ªët", type="secondary"):
                    with suppress(Exception):
                        post_form("/feedback", {
                            "session_id": st.session_state.session_id,
                            "question": prev_q,
                            "answer": msg["content"],
                            "rating": "down",
                        })
                        st.success("ƒê√£ g·ª≠i ph·∫£n h·ªìi üëé")

    # ---- √¥ nh·∫≠p lu√¥n ·ªü cu·ªëi trang ----
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

    if user_input:
        # c·∫≠p nh·∫≠t state nh∆∞ng KH√îNG render ngay t·∫°i ƒë√¢y
        st.session_state.messages.append({"role": "user", "content": user_input})

        try:
            data = post_json(
                "/chat",
                {"messages": st.session_state.messages, "session_id": st.session_state.session_id},
            )
            reply = (data or {}).get("reply") or (data or {}).get("response") or "Xin l·ªói, hi·ªán ch∆∞a c√≥ ph·∫£n h·ªìi."
            st.session_state.messages.append({"role": "assistant", "content": reply})
            st.session_state.last_reply = reply
        except requests.RequestException as e:
            st.session_state.messages.append({
                "role": "assistant",
                "content": "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi backend. Ki·ªÉm tra `BACKEND_URL` trong Secrets ho·∫∑c th·ª≠ l·∫°i sau.\n\n"
                           f"Chi ti·∫øt l·ªói: `{e}`"
            })

        # rerender ƒë·ªÉ t·∫•t c·∫£ tin nh·∫Øn hi·ªÉn th·ªã **ph√≠a tr√™n**,
        # c√≤n √¥ nh·∫≠p v·∫´n n·∫±m **cu·ªëi c√πng**
        try:
            st.rerun()  # Streamlit >=1.30
        except Exception:
            st.experimental_rerun()

    # ·∫®n debug tr·ª´ khi SHOW_DEBUG=1
    if os.getenv("SHOW_DEBUG") == "1":
        st.caption(
            f"Phi√™n: `{st.session_state.session_id}` ‚Ä¢ Backend: `{BACKEND_URL}` ‚Ä¢ "
            f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )

# =========================
# 5) Tab Qu·∫£n tr·ªã
# =========================
with tab_admin:
    st.header("üõ† Khu v·ª±c Qu·∫£n tr·ªã")

    pwd = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã", type="password")
    if pwd != ADMIN_PASSWORD:
        st.info("Nh·∫≠p ƒë√∫ng m·∫≠t kh·∫©u ƒë·ªÉ truy c·∫≠p c√¥ng c·ª• qu·∫£n tr·ªã. ƒê·∫∑t `ADMIN_PASSWORD` trong ENV ho·∫∑c st.secrets.")
        st.stop()

    st.success("ƒêƒÉng nh·∫≠p qu·∫£n tr·ªã th√†nh c√¥ng ‚úÖ")

    # 5.1 Ki·ªÉm tra backend
    st.subheader("‚úÖ Ki·ªÉm tra t√¨nh tr·∫°ng Backend")
    colA, colB = st.columns([1, 1])
    with colA:
        if st.button("Ping /health"):
            result = get_json("/health")
            if result:
                st.write(result)
            else:
                st.error("Kh√¥ng g·ªçi ƒë∆∞·ª£c `/health`. Ki·ªÉm tra BACKEND_URL/Service.")
    with colB:
        st.write(f"**BACKEND_URL:** `{BACKEND_URL}`")

    st.divider()

    # 5.2 L·ªãch s·ª≠ h·ªôi tho·∫°i
    st.subheader("üóÇ L·ªãch s·ª≠ h·ªôi tho·∫°i")
    st.caption("Y√™u c·∫ßu backend cung c·∫•p endpoint JSON ho·∫∑c CSV. Th·ª≠ c√°c ph∆∞∆°ng √°n ph·ªï bi·∫øn b√™n d∆∞·ªõi.")
    tabs_hist = st.tabs(["/history (JSON)", "/chat_history.csv (CSV)"])
    with tabs_hist[0]:
        hist = get_json("/history")
        if hist and isinstance(hist, list):
            df_hist_json = pd.DataFrame(hist)
            st.dataframe(df_hist_json, use_container_width=True)
        elif hist:
            st.write(hist)
        else:
            st.info("Kh√¥ng c√≥ endpoint `/history` ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c.")
    with tabs_hist[1]:
        df_hist_csv = get_csv_as_df("/chat_history.csv")
        if df_hist_csv is not None:
            st.dataframe(df_hist_csv, use_container_width=True)
        else:
            st.info("Kh√¥ng t√¨m th·∫•y `/chat_history.csv` t·ª´ backend.")

    st.divider()

    # 5.3 Feedback
    st.subheader("üìù Feedback")
    tabs_fb = st.tabs(["/feedbacks (JSON)", "/feedback.csv (CSV)"])
    with tabs_fb[0]:
        fjson = get_json("/feedbacks")
        if fjson and isinstance(fjson, list):
            st.dataframe(pd.DataFrame(fjson), use_container_width=True)
        elif fjson:
            st.write(fjson)
        else:
            st.info("Kh√¥ng c√≥ endpoint `/feedbacks` ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c.")
    with tabs_fb[1]:
        df_fb_csv = get_csv_as_df("/feedback.csv")
        if df_fb_csv is not None:
            st.dataframe(df_fb_csv, use_container_width=True)
        else:
            st.info("Kh√¥ng t√¨m th·∫•y `/feedback.csv` t·ª´ backend.")

    st.divider()

    # 5.4 Th·ªëng k√™: Top 10 c√¢u h·ªèi ƒë∆∞·ª£c h·ªèi nhi·ªÅu nh·∫•t
    st.subheader("üìà Top 10 c√¢u h·ªèi ƒë∆∞·ª£c h·ªèi nhi·ªÅu nh·∫•t")

    def _load_questions_series() -> pd.Series | None:
        """
        Tr·∫£ v·ªÅ Series c√°c c√¢u h·ªèi (string) t·ª´ /history JSON ho·∫∑c /chat_history.csv.
        C·ªë g·∫Øng d√≤ t√™n c·ªôt ph·ªï bi·∫øn: 'question', 'user_input', 'content', ...
        Ho·∫∑c l·ªçc t·ª´ l·ªãch s·ª≠ theo role='user'.
        """
        # ∆Øu ti√™n JSON
        data = get_json("/history")
        df = None
        if isinstance(data, list) and len(data) > 0:
            df = pd.DataFrame(data)

        if df is None:
            df = get_csv_as_df("/chat_history.csv")

        if df is None or len(df) == 0:
            return None

        # ∆Øu ti√™n c·ªôt question
        for col in ["question", "user_input", "prompt", "text", "content"]:
            if col in df.columns:
                s = df[col].dropna().astype(str)
                if "role" in df.columns:
                    try:
                        s = df.loc[df["role"].astype(str).str.lower().eq("user"), col].dropna().astype(str)
                    except Exception:
                        pass
                return s if len(s) else None

        if {"role", "content"}.issubset(set(df.columns)):
            s = df.loc[df["role"].astype(str).str.lower().eq("user"), "content"].dropna().astype(str)
            return s if len(s) else None

        return None

    s_questions = _load_questions_series()
    if s_questions is None or len(s_questions) == 0:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¢u h·ªèi ƒë·ªÉ th·ªëng k√™ (c·∫ßn `/history` JSON ho·∫∑c `/chat_history.csv`).")
    else:
        s_norm = (
            s_questions.astype(str)
            .str.strip()
            .str.lower()
            .str.replace(r"\s+", " ", regex=True)
        )
        top_counts = s_norm.value_counts().head(10)

        rep_map = {}
        for orig in s_questions:
            key = str(orig).strip().lower().replace("\n", " ")
            key = " ".join(key.split())
            if key not in rep_map:
                rep_map[key] = str(orig).strip()

        rows = [{"C√¢u h·ªèi": rep_map.get(k, k), "S·ªë l·∫ßn": int(v)} for k, v in top_counts.items()]
        df_top = pd.DataFrame(rows)

        st.dataframe(df_top, use_container_width=True, hide_index=True)
        st.bar_chart(df_top.set_index("C√¢u h·ªèi")["S·ªë l·∫ßn"])

    st.divider()

    # 5.5 Upload MC_chatbot.csv (n·∫øu backend h·ªó tr·ª£)
    st.subheader("‚¨ÜÔ∏è C·∫≠p nh·∫≠t MC_chatbot.csv (tu·ª≥ ch·ªçn)")
    st.caption(
        "Frontend kh√¥ng ghi tr·ª±c ti·∫øp t·ªáp v√†o server. T·∫°o endpoint `POST /upload_mc_data` ·ªü backend "
        "ƒë·ªÉ nh·∫≠n file CSV n·∫øu mu·ªën c·∫≠p nh·∫≠t d·ªØ li·ªáu."
    )
    uploaded = st.file_uploader("Ch·ªçn file MC_chatbot.csv ƒë·ªÉ t·∫£i l√™n backend", type=["csv"])
    if uploaded and st.button("G·ª≠i l√™n backend (/upload_mc_data)"):
        try:
            url = _join("/upload_mc_data")
            files = {"file": ("MC_chatbot.csv", uploaded.getvalue(), "text/csv")}
            r = requests.post(url, files=files, timeout=DEFAULT_TIMEOUT)
            if r.status_code == 200:
                st.success("ƒê√£ g·ª≠i file l√™n backend.")
            else:
                st.warning(f"Backend tr·∫£ {r.status_code}: {r.text}")
        except requests.RequestException as e:
            st.error(f"L·ªói g·ª≠i file: {e}")
