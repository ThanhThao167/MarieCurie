# streamlit_chat.py
# Frontend cho Chatbot t∆∞ v·∫•n tuy·ªÉn sinh, ch·∫°y tr√™n Streamlit (Cloud ho·∫∑c local)

import os
import uuid
import json
import requests
import pandas as pd
from datetime import datetime
import streamlit as st

# =========================
# 1) C·∫•u h√¨nh & ti·ªán √≠ch
# =========================
st.set_page_config(page_title="Chatbot T∆∞ V·∫•n Tuy·ªÉn Sinh", page_icon="ü§ñ")

# ƒê·ªçc c·∫•u h√¨nh t·ª´ ENV ho·∫∑c st.secrets (∆∞u ti√™n ENV)
BACKEND_URL = os.getenv("BACKEND_URL") or st.secrets.get("BACKEND_URL", "http://localhost:8000")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD") or st.secrets.get("ADMIN_PASSWORD", "admin123")

# Timeout m·∫∑c ƒë·ªãnh cho m·ªçi request ra backend (gi√¢y)
DEFAULT_TIMEOUT = 60

def post_json(path: str, payload: dict):
    """POST JSON l√™n backend v√† tr·∫£ v·ªÅ dict (ho·∫∑c raise)."""
    url = f"{BACKEND_URL.rstrip('/')}/{path.lstrip('/')}"
    resp = requests.post(url, json=payload, timeout=DEFAULT_TIMEOUT)
    resp.raise_for_status()
    return resp.json()

def post_form(path: str, form: dict):
    """POST form-data l√™n backend v√† tr·∫£ v·ªÅ dict (ho·∫∑c raise)."""
    url = f"{BACKEND_URL.rstrip('/')}/{path.lstrip('/')}"
    resp = requests.post(url, data=form, timeout=DEFAULT_TIMEOUT)
    resp.raise_for_status()
    return resp.json()

def get_json(path: str):
    """GET JSON t·ª´ backend; tr·∫£ v·ªÅ None n·∫øu 404/kh√¥ng c√≥."""
    url = f"{BACKEND_URL.rstrip('/')}/{path.lstrip('/')}"
    try:
        resp = requests.get(url, timeout=DEFAULT_TIMEOUT)
        if resp.status_code == 404:
            return None
        resp.raise_for_status()
        # cho ph√©p plain text "ok"
        try:
            return resp.json()
        except Exception:
            return {"text": resp.text}
    except requests.RequestException:
        return None

def get_csv_as_df(path: str):
    """Th·ª≠ t·∫£i m·ªôt CSV (backend ph·∫£i ph·ª•c v·ª• URL n√†y) ‚Üí DataFrame; l·ªói th√¨ tr·∫£ None."""
    url = f"{BACKEND_URL.rstrip('/')}/{path.lstrip('/')}"
    try:
        df = pd.read_csv(url)
        return df
    except Exception:
        return None

# =========================
# 2) State kh·ªüi t·∫°o
# =========================
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

if "messages" not in st.session_state:
    # ƒê·ªãnh d·∫°ng openai style: [{"role":"user"/"assistant","content":"..."}]
    st.session_state.messages = []

if "last_reply" not in st.session_state:
    st.session_state.last_reply = ""

# =========================
# 3) UI: Tabs
# =========================
tab_user, tab_admin = st.tabs(["üë®‚Äçüéì Ng∆∞·ªùi d√πng", "üõ† Qu·∫£n tr·ªã"])

# =========================
# 4) Tab Ng∆∞·ªùi d√πng (Chat)
# =========================
with tab_user:
    st.title("ü§ñ Chatbot T∆∞ v·∫•n Tuy·ªÉn sinh l·ªõp 10 ‚Äì THPT Marie Curie")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
    if len(st.session_state.messages) == 0:
        with st.chat_message("assistant"):
            st.markdown(
                "Ch√†o b·∫°n! M√¨nh l√† **Chatbot t∆∞ v·∫•n tuy·ªÉn sinh l·ªõp 10**. "
                "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ ch·ªâ ti√™u, c√°ch ƒëƒÉng k√Ω, th·ªùi kh√≥a bi·ªÉu, h·ªçc ph√≠, ch√≠nh s√°ch, v.v."
            )

    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # √î nh·∫≠p chat
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

    if user_input:
        # Append tin nh·∫Øn c·ªßa user v√†o UI ngay
        st.session_state.messages.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)

        # G·ªçi backend /chat
        try:
            payload = {
                "messages": st.session_state.messages,
                "session_id": st.session_state.session_id
            }
            data = post_json("/chat", payload)
            # Backend d·ª± ki·∫øn tr·∫£ v·ªÅ {"reply": "...", "source": "...", "similarity": 0.95, ...}
            reply = data.get("reply") or data.get("response") or "Xin l·ªói, hi·ªán ch∆∞a c√≥ ph·∫£n h·ªìi."
            st.session_state.messages.append({"role": "assistant", "content": reply})
            st.session_state.last_reply = reply

            with st.chat_message("assistant"):
                st.markdown(reply)

                # N√∫t feedback cho c√¢u tr·∫£ l·ªùi hi·ªán t·∫°i
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üëç H√†i l√≤ng", key=f"fb_up_{len(st.session_state.messages)}"):
                        try:
                            post_form(
                                "/feedback",
                                {
                                    "session_id": st.session_state.session_id,
                                    "question": user_input,
                                    "answer": reply,
                                    "rating": "up",
                                },
                            )
                            st.success("ƒê√£ g·ª≠i ph·∫£n h·ªìi üëç")
                        except requests.RequestException as e:
                            st.warning(f"G·ª≠i feedback th·∫•t b·∫°i: {e}")

                with col2:
                    if st.button("üëé Ch∆∞a t·ªët", key=f"fb_dn_{len(st.session_state.messages)}"):
                        try:
                            post_form(
                                "/feedback",
                                {
                                    "session_id": st.session_state.session_id,
                                    "question": user_input,
                                    "answer": reply,
                                    "rating": "down",
                                },
                            )
                            st.success("ƒê√£ g·ª≠i ph·∫£n h·ªìi üëé")
                        except requests.RequestException as e:
                            st.warning(f"G·ª≠i feedback th·∫•t b·∫°i: {e}")

        except requests.RequestException as e:
            with st.chat_message("assistant"):
                st.error(
                    "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi backend. "
                    "Vui l√≤ng ki·ªÉm tra `BACKEND_URL` tr√™n Streamlit Secrets ho·∫∑c th·ª≠ l·∫°i sau."
                )
                st.code(str(e))

    # Thanh th√¥ng tin nh·ªè
    st.caption(
        f"Phi√™n: `{st.session_state.session_id}` ‚Ä¢ Backend: `{BACKEND_URL}` ‚Ä¢ "
        f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

# =========================
# 5) Tab Qu·∫£n tr·ªã
# =========================
with tab_admin:
    st.header("üõ† Khu v·ª±c Qu·∫£n tr·ªã")

    pwd = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã", type="password")
    if pwd != ADMIN_PASSWORD:
        st.info(
            "Nh·∫≠p ƒë√∫ng m·∫≠t kh·∫©u ƒë·ªÉ xem c√¥ng c·ª• qu·∫£n tr·ªã. "
            "B·∫°n ƒë·∫∑t m·∫≠t kh·∫©u trong **ENV** ho·∫∑c **`st.secrets`** v·ªõi key `ADMIN_PASSWORD`."
        )
        st.stop()

    st.success("ƒêƒÉng nh·∫≠p qu·∫£n tr·ªã th√†nh c√¥ng ‚úÖ")

    # 5.1. Ki·ªÉm tra t√¨nh tr·∫°ng backend
    st.subheader("‚úÖ Ki·ªÉm tra t√¨nh tr·∫°ng Backend")
    colA, colB = st.columns(2)
    with colA:
        if st.button("Ping /health"):
            result = get_json("/health")
            if result:
                st.write(result)
            else:
                st.error("Kh√¥ng g·ªçi ƒë∆∞·ª£c `/health`. Ki·ªÉm tra BACKEND_URL ho·∫∑c tri·ªÉn khai backend.")
    with colB:
        st.write(f"**BACKEND_URL:** `{BACKEND_URL}`")

    st.divider()

    # 5.2. Xem l·ªãch s·ª≠ chat (n·∫øu backend c√≥ endpoint)
    st.subheader("üóÇ L·ªãch s·ª≠ h·ªôi tho·∫°i")
    st.caption("Y√™u c·∫ßu backend cung c·∫•p endpoint JSON ho·∫∑c CSV. Th·ª≠ c√°c ph∆∞∆°ng √°n ph·ªï bi·∫øn b√™n d∆∞·ªõi.")

    tabs_hist = st.tabs(["/history (JSON)", "/chat_history.csv (CSV)"])
    with tabs_hist[0]:
        hist = get_json("/history")
        if hist and isinstance(hist, list):
            df = pd.DataFrame(hist)
            st.dataframe(df, use_container_width=True)
        elif hist:
            st.write(hist)
        else:
            st.info("Kh√¥ng c√≥ endpoint `/history` ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p.")

    with tabs_hist[1]:
        df = get_csv_as_df("/chat_history.csv")
        if df is not None:
            st.dataframe(df, use_container_width=True)
        else:
            st.info("Kh√¥ng t√¨m th·∫•y `/chat_history.csv` t·ª´ backend.")

    st.divider()

    # 5.3. Xem feedback (n·∫øu backend c√≥ endpoint)
    st.subheader("üìù Feedback ng∆∞·ªùi d√πng")
    tabs_fb = st.tabs(["/feedbacks (JSON)", "/feedback.csv (CSV)"])
    with tabs_fb[0]:
        fjson = get_json("/feedbacks")
        if fjson and isinstance(fjson, list):
            df = pd.DataFrame(fjson)
            st.dataframe(df, use_container_width=True)
        elif fjson:
            st.write(fjson)
        else:
            st.info("Kh√¥ng c√≥ endpoint `/feedbacks` ho·∫∑c kh√¥ng th·ªÉ truy c·∫≠p.")

    with tabs_fb[1]:
        df = get_csv_as_df("/feedback.csv")
        if df is not None:
            st.dataframe(df, use_container_width=True)
        else:
            st.info("Kh√¥ng t√¨m th·∫•y `/feedback.csv` t·ª´ backend.")

    st.divider()

    # 5.4. H∆∞·ªõng d·∫´n ch·ªânh s·ª≠a d·ªØ li·ªáu MC_chatbot.csv (ph·ª• thu·ªôc backend)
    st.subheader("‚úèÔ∏è Ch·ªânh s·ª≠a d·ªØ li·ªáu MC_chatbot.csv (tu·ª≥ ch·ªçn)")
    st.markdown(
        "- Tr√™n m√¥i tr∆∞·ªùng Cloud, frontend **kh√¥ng th·ªÉ** ghi tr·ª±c ti·∫øp v√†o ·ªï ƒëƒ©a c·ªßa backend.\n"
        "- B·∫°n c√≥ th·ªÉ:\n"
        "  1) T·∫°o **endpoint upload** ·ªü backend (v√≠ d·ª•: `POST /upload_mc_data` nh·∫≠n file CSV), r·ªìi d√πng file uploader d∆∞·ªõi ƒë√¢y ƒë·ªÉ g·ª≠i l√™n.\n"
        "  2) Ho·∫∑c g·∫Øn c∆° s·ªü d·ªØ li·ªáu (Postgres/Supabase/Google Sheets) ƒë·ªÉ l∆∞u b·ªÅn v·ªØng.\n"
    )

    uploaded = st.file_uploader("Ch·ªçn file MC_chatbot.csv ƒë·ªÉ t·∫£i l√™n backend (n·∫øu backend c√≥ endpoint).", type=["csv"])
    if uploaded and st.button("‚û°Ô∏è G·ª≠i l√™n backend (POST /upload_mc_data)"):
        try:
            url = f"{BACKEND_URL.rstrip('/')}/upload_mc_data"
            files = {"file": ("MC_chatbot.csv", uploaded.getvalue(), "text/csv")}
            resp = requests.post(url, files=files, timeout=DEFAULT_TIMEOUT)
            if resp.status_code == 200:
                st.success("ƒê√£ g·ª≠i file l√™n backend.")
            else:
                st.warning(f"Backend tr·∫£ v·ªÅ m√£ {resp.status_code}: {resp.text}")
        except requests.RequestException as e:
            st.error(f"L·ªói g·ª≠i file: {e}")

# ============ H·∫øt ============
