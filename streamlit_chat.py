# streamlit_chat.py
# ============================================================================
# Chatbot t∆∞ v·∫•n tuy·ªÉn sinh 10 ‚Äì Marie Curie
# Frontend: Streamlit. G·ªçi backend qua HTTP.
# Thi·∫øt k·∫ø:
#   - L·ªùi ch√†o l√† m·ªôt message th·∫≠t (kh√¥ng render t·∫°m, kh√¥ng c·∫ßn rerun)
#   - Kh√¥ng d√πng st.experimental_rerun ƒë·ªÉ tr√°nh "m·∫•t" l∆∞·ª£t chat ƒë·∫ßu ti√™n
#   - Ph√¢n t√°ch module: c·∫•u h√¨nh, g·ªçi API, UI User/Admin, ti·ªán √≠ch
#   - B·∫Øt l·ªói m·∫°ng/timeout r√µ r√†ng, hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán
#   - B·∫£o m·∫≠t ƒë∆°n gi·∫£n cho tab Qu·∫£n tr·ªã b·∫±ng ADMIN_PASSWORD
# ============================================================================

from __future__ import annotations

import os
import io
import json
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

import requests
import pandas as pd
import streamlit as st

# ============================== C·∫§U H√åNH UI =================================
APP_TITLE = "Chatbot AI ‚Äì tr·ª£ l√≠ ·∫£o h·ªó tr·ª£ t∆∞ v·∫•n tuy·ªÉn sinh 10 ‚Äì THPT Marie Curie"
PAGE_ICON = "ü§ñ"
LAYOUT = "wide"
THEME_HINT = """
<style>
    /* TƒÉng t√≠nh d·ªÖ ƒë·ªçc */
    .markdown-text-container { font-size: 1.05rem; }
    .stChatMessage { line-height: 1.5; }
    /* N√∫t nh·ªè g·ªçn */
    .stButton > button { border-radius: 0.6rem; padding: 0.4rem 0.9rem; }
</style>
"""

DEFAULT_TIMEOUT = (10, 60)  # (connect, read) seconds
BACKEND_URL = os.getenv("BACKEND_URL", "").rstrip("/")
ADMIN_PASSWORD_ENV = os.getenv("ADMIN_PASSWORD", "admin123")  # nh·ªõ ƒë·ªïi khi deploy

# ============================== TI·ªÜN √çCH CHUNG ==============================

def now_iso() -> str:
    return datetime.utcnow().isoformat()

def human_err(exc: Exception) -> str:
    return f"L·ªói k·∫øt n·ªëi t·ªõi backend: {exc.__class__.__name__} ‚Äì {exc}"

def as_dataframe_safe(data: Any) -> pd.DataFrame:
    try:
        if isinstance(data, list):
            return pd.DataFrame(data)
        if isinstance(data, dict):
            return pd.DataFrame([data])
    except Exception:
        pass
    return pd.DataFrame()

# ============================== L·ªöP API CLIENT ==============================

class BackendClient:
    """
    G√≥i g·ªçn vi·ªác g·ªçi backend. Ch·∫•p nh·∫≠n c√°c bi·∫øn th·ªÉ field tr·∫£ l·ªùi:
    {answer} ho·∫∑c {reply} ho·∫∑c {response}
    """

    def __init__(self, base_url: str):
        self.base_url = base_url

    def _url(self, path: str) -> str:
        if not self.base_url:
            raise RuntimeError("BACKEND_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.")
        return f"{self.base_url}{path}"

    def health(self) -> Tuple[bool, str]:
        try:
            r = requests.get(self._url("/health"), timeout=DEFAULT_TIMEOUT)
            if r.ok:
                return True, f"OK ({r.status_code})"
            return False, f"DOWN ({r.status_code})"
        except Exception as e:
            return False, human_err(e)

    def chat(self, user_text: str, history: List[Dict[str, str]]) -> Tuple[bool, str, Dict[str, Any]]:
        """
        G·ªçi POST /chat. Backend n√™n hi·ªÉu tr∆∞·ªùng:
            - user_input (ho·∫∑c question, ho·∫∑c prompt)
            - history: danh s√°ch {role, content}
        """
        payload = {
            "user_input": user_text,
            "history": history,
        }
        try:
            r = requests.post(self._url("/chat"), json=payload, timeout=DEFAULT_TIMEOUT)
            if not r.ok:
                return False, f"HTTP {r.status_code}: {r.text[:200]}", {}
            data = r.json()
            text = data.get("answer") or data.get("reply") or data.get("response") or ""
            if not isinstance(text, str) or not text.strip():
                return False, "Backend kh√¥ng tr·∫£ v·ªÅ n·ªôi dung h·ª£p l·ªá (answer/reply/response).", data
            return True, text, data
        except Exception as e:
            return False, human_err(e), {}

    def send_feedback(self, question: str, answer: str, rating: int, meta: Optional[Dict[str, Any]] = None) -> Tuple[bool, str]:
        payload = {
            "question": question,
            "answer": answer,
            "rating": rating,  # +1 or -1
            "meta": meta or {},
            "ts": now_iso(),
        }
        try:
            r = requests.post(self._url("/feedback"), json=payload, timeout=DEFAULT_TIMEOUT)
            if r.ok:
                return True, "ƒê√£ ghi nh·∫≠n ph·∫£n h·ªìi."
            return False, f"HTTP {r.status_code}: {r.text[:200]}"
        except Exception as e:
            return False, human_err(e)

    def fetch_json(self, path: str) -> Tuple[bool, Any, str]:
        try:
            r = requests.get(self._url(path), timeout=DEFAULT_TIMEOUT)
            if not r.ok:
                return False, None, f"HTTP {r.status_code}: {r.text[:200]}"
            return True, r.json(), "OK"
        except Exception as e:
            return False, None, human_err(e)

    def fetch_csv_bytes(self, path: str) -> Tuple[bool, bytes, str]:
        try:
            r = requests.get(self._url(path), timeout=DEFAULT_TIMEOUT)
            if not r.ok:
                return False, b"", f"HTTP {r.status_code}: {r.text[:200]}"
            return True, r.content, "OK"
        except Exception as e:
            return False, b"", human_err(e)

    def upload_mc_csv(self, file_bytes: bytes, filename: str) -> Tuple[bool, str]:
        files = {"file": (filename, file_bytes, "text/csv")}
        try:
            r = requests.post(self._url("/upload_mc_data"), files=files, timeout=DEFAULT_TIMEOUT)
            if r.ok:
                return True, "Upload th√†nh c√¥ng v√† backend ƒë√£ nh·∫≠n d·ªØ li·ªáu."
            return False, f"HTTP {r.status_code}: {r.text[:200]}"
        except Exception as e:
            return False, human_err(e)

# ============================== KH·ªûI T·∫†O STATE ==============================

def init_state() -> None:
    st.set_page_config(page_title=APP_TITLE, page_icon=PAGE_ICON, layout=LAYOUT)
    st.markdown(THEME_HINT, unsafe_allow_html=True)

    if "messages" not in st.session_state:
        st.session_state.messages: List[Dict[str, Any]] = []
    if "last_answer" not in st.session_state:
        st.session_state.last_answer = ""
    if "last_question" not in st.session_state:
        st.session_state.last_question = ""
    if "admin_authed" not in st.session_state:
        st.session_state.admin_authed = False

    # L·ªùi ch√†o l√† m·ªôt message th·∫≠t, ch·ªâ t·∫°o m·ªôt l·∫ßn khi list r·ªóng
    if len(st.session_state.messages) == 0:
        st.session_state.messages.append({
            "role": "assistant",
            "content": (
                "Ch√†o b·∫°n! M√¨nh l√† tr·ª£ l√≠ ·∫£o tuy·ªÉn sinh 10 ‚Äì THPT Marie Curie. "
                "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ quy ch·∫ø tuy·ªÉn sinh, h·ªì s∆°, m·ªëc th·ªùi gian, ƒëi·ªÉm chu·∫©n‚Ä¶ "
                "H√£y ƒë·∫∑t c√¢u h·ªèi b√™n d∆∞·ªõi nh√©!"
            ),
            "ts": now_iso()
        })

# ============================== UI: USER TAB =================================

def render_user_tab(client: BackendClient) -> None:
    st.header("üë§ Ng∆∞·ªùi d√πng")

    # 1) Hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë√£ c√≥
    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # 2) Nh·∫≠n input
    user_text = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n‚Ä¶")
    if not user_text:
        return

    # 3) Append c√¢u h·ªèi NGAY L·∫¨P T·ª®C (kh√¥ng rerun)
    st.session_state.messages.append({
        "role": "user",
        "content": user_text,
        "ts": now_iso()
    })
    with st.chat_message("user"):
        st.markdown(user_text)

    # 4) G·ªçi backend v√† render "assistant thinking" trong c√πng l∆∞·ª£t
    with st.chat_message("assistant"):
        thinking_placeholder = st.empty()
        thinking_placeholder.markdown("_ƒêang so·∫°n c√¢u tr·∫£ l·ªùi‚Ä¶_")

        success, answer_text, raw = client.chat(
            user_text=user_text,
            history=[
                {"role": m["role"], "content": m["content"]}
                for m in st.session_state.messages
                if m["role"] in ("user", "assistant")
            ],
        )

        if success:
            thinking_placeholder.empty()
            st.markdown(answer_text)
            st.session_state.messages.append({
                "role": "assistant",
                "content": answer_text,
                "ts": now_iso()
            })
            st.session_state.last_question = user_text
            st.session_state.last_answer = answer_text
        else:
            thinking_placeholder.empty()
            st.error(answer_text)
            st.session_state.messages.append({
                "role": "assistant",
                "content": f"Xin l·ªói, hi·ªán ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c: {answer_text}",
                "ts": now_iso()
            })
            st.session_state.last_question = user_text
            st.session_state.last_answer = ""

    # 5) Feedback cho c√¢u tr·∫£ l·ªùi v·ª´a nh·∫≠n
    col1, col2, col3 = st.columns([1,1,6])
    with col1:
        if st.button("üëç H·ªØu √≠ch", use_container_width=True):
            ok, msg = client.send_feedback(
                st.session_state.last_question,
                st.session_state.last_answer,
                rating=+1,
                meta={"source": "streamlit", "version": 1},
            )
            st.toast("C·∫£m ∆°n ph·∫£n h·ªìi!" if ok else f"Kh√¥ng ghi ƒë∆∞·ª£c ph·∫£n h·ªìi: {msg}")
    with col2:
        if st.button("üëé Ch∆∞a t·ªët", use_container_width=True):
            ok, msg = client.send_feedback(
                st.session_state.last_question,
                st.session_state.last_answer,
                rating=-1,
                meta={"source": "streamlit", "version": 1},
            )
            st.toast("ƒê√£ ghi nh·∫≠n g√≥p √Ω!" if ok else f"Kh√¥ng ghi ƒë∆∞·ª£c ph·∫£n h·ªìi: {msg}")

# ============================== UI: ADMIN TAB ================================

def render_admin_tab(client: BackendClient) -> None:
    st.header("üõ†Ô∏è Qu·∫£n tr·ªã")

    # --- X√°c th·ª±c ƒë∆°n gi·∫£n ---
    if not st.session_state.admin_authed:
        with st.form("admin_login", clear_on_submit=False):
            pwd = st.text_input("M·∫≠t kh·∫©u qu·∫£n tr·ªã", type="password")
            ok = st.form_submit_button("ƒêƒÉng nh·∫≠p")
        if ok:
            if pwd and pwd == ADMIN_PASSWORD_ENV:
                st.session_state.admin_authed = True
                st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng.")
            else:
                st.error("Sai m·∫≠t kh·∫©u.")
        return

    # --- Th√¥ng tin h·ªá th·ªëng ---
    st.subheader("T√¨nh tr·∫°ng Backend")
    colA, colB, colC = st.columns([1,1,2])
    with colA:
        ping = st.button("Ping /health", use_container_width=True)
    with colB:
        st.write(f"**BACKEND_URL:** `{BACKEND_URL or 'CH∆ØA C·∫§U H√åNH'}`")
    if ping:
        ok, msg = client.health()
        (st.success if ok else st.error)(msg)

    st.divider()

    # --- D·ªØ li·ªáu/CSV qu·∫£n tr·ªã ---
    st.subheader("L·ªãch s·ª≠ & Ph·∫£n h·ªìi")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("T·∫£i JSON /history", use_container_width=True):
            ok, data, msg = client.fetch_json("/history")
            if ok:
                df = as_dataframe_safe(data)
                st.dataframe(df, use_container_width=True, hide_index=True)
            else:
                st.error(msg)
    with col2:
        if st.button("T·∫£i JSON /feedbacks", use_container_width=True):
            ok, data, msg = client.fetch_json("/feedbacks")
            if ok:
                df = as_dataframe_safe(data)
                st.dataframe(df, use_container_width=True, hide_index=True)
            else:
                st.error(msg)
    with col3:
        if st.button("T·∫£i CSV /chat_history.csv", use_container_width=True):
            ok, b, msg = client.fetch_csv_bytes("/chat_history.csv")
            if ok:
                st.download_button("‚¨áÔ∏è L∆∞u chat_history.csv", b, file_name="chat_history.csv", mime="text/csv", use_container_width=True)
            else:
                st.error(msg)
    with col4:
        if st.button("T·∫£i CSV /feedback.csv", use_container_width=True):
            ok, b, msg = client.fetch_csv_bytes("/feedback.csv")
            if ok:
                st.download_button("‚¨áÔ∏è L∆∞u feedback.csv", b, file_name="feedback.csv", mime="text/csv", use_container_width=True)
            else:
                st.error(msg)

    st.divider()

    # --- Upload d·ªØ li·ªáu c√¢u h·ªèi/FAQ (MC_chatbot.csv) ---
    st.subheader("C·∫≠p nh·∫≠t d·ªØ li·ªáu t∆∞ v·∫•n (CSV)")
    up = st.file_uploader("Ch·ªçn file CSV (v√≠ d·ª•: MC_chatbot.csv)", type=["csv"])
    if up is not None:
        bytes_io = up.read()
        if st.button("üì§ Upload l√™n backend", use_container_width=True):
            ok, msg = client.upload_mc_csv(bytes_io, up.name)
            (st.success if ok else st.error)(msg)

# ============================== MAIN APP =====================================

def main() -> None:
    init_state()

    # Nh·∫Øc c·∫•u h√¨nh n·∫øu thi·∫øu BACKEND_URL
    if not BACKEND_URL:
        st.warning("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng BACKEND_URL. H√£y ƒë·∫∑t BACKEND_URL tr·ªè t·ªõi Railway (v√≠ d·ª•: https://your-app.up.railway.app).")

    client = BackendClient(BACKEND_URL) if BACKEND_URL else None
    tabs = st.tabs(["Ng∆∞·ªùi d√πng", "Qu·∫£n tr·ªã"])

    with tabs[0]:
        if client:
            render_user_tab(client)
        else:
            st.info("Ch∆∞a c√≥ BACKEND_URL n√™n kh√¥ng th·ªÉ g·ª≠i c√¢u h·ªèi. Vui l√≤ng c·∫•u h√¨nh r·ªìi t·∫£i l·∫°i trang.")

    with tabs[1]:
        if client:
            render_admin_tab(client)
        else:
            st.info("Ch∆∞a c√≥ BACKEND_URL ‚Äì c√°c t√≠nh nƒÉng qu·∫£n tr·ªã s·∫Ω ho·∫°t ƒë·ªông sau khi c·∫•u h√¨nh.")

if __name__ == "__main__":
    main()
