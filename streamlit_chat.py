# streamlit_chat.py
# Chatbot tuy·ªÉn sinh 10 ‚Äì Streamlit (UI chu·∫©n: c√¢u h·ªèi m·ªõi ·ªü cu·ªëi + thinking)
# B·∫£n t∆∞∆°ng th√≠ch Streamlit/Python c≈© (fallback rerun & type hints).

import os
import uuid
import requests
import pandas as pd
from datetime import datetime
from contextlib import suppress
from typing import Optional
import streamlit as st

# ---------------- Page setup & CSS ----------------
st.set_page_config(
    page_title="Chatbot AI- tr·ª£ l√≠ ·∫£o h·ªó tr·ª£ t∆∞ v·∫•n tuy·ªÉn sinh 10- THPT Marie Curie",
    page_icon="ü§ñ",
    layout="wide",
)
st.markdown("""
<style>
div.stTabs [data-baseweb="tab-list"]{gap:.25rem}
div.stTabs [data-baseweb="tab-list"] button[role="tab"]{
  background:transparent;border:1px solid transparent;border-bottom:none;
  padding:.5rem 1rem;border-radius:10px 10px 0 0
}
div.stTabs [data-baseweb="tab-list"] button[role="tab"][aria-selected="true"]{
  background:rgba(31,111,235,.2);border-color:rgba(31,111,235,.35);color:#fff
}
div.stTabs [data-baseweb="tab-list"] button p{font-size:1rem;font-weight:600}
.stChatInput textarea{border:2px solid rgba(255,255,255,.15)!important;border-radius:12px!important}
.small-btn > button{padding:.25rem .5rem;min-width:0;border-radius:10px}
</style>
""", unsafe_allow_html=True)

# ---------------- Utils ----------------
def do_rerun() -> None:
    """Rerun an to√†n cho m·ªçi phi√™n b·∫£n Streamlit."""
    try:
        st.rerun()  # Streamlit >= 1.30
    except Exception:
        try:
            st.experimental_rerun()  # b·∫£n c≈©
        except Exception:
            pass  # c√πng l·∫Øm kh√¥ng rerun, UI v·∫´n ho·∫°t ƒë·ªông

# ---------------- Config ----------------
BACKEND_URL = os.getenv("BACKEND_URL") or st.secrets.get("BACKEND_URL", "http://localhost:8000")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD") or st.secrets.get("ADMIN_PASSWORD", "admin123")
DEFAULT_TIMEOUT = 60

def _join(p:str)->str: return f"{BACKEND_URL.rstrip('/')}/{p.lstrip('/')}"

def post_json(p:str, payload:dict):
    r=requests.post(_join(p), json=payload, timeout=DEFAULT_TIMEOUT); r.raise_for_status()
    try: return r.json()
    except: return {"text": r.text}

def post_form(p:str, form:dict):
    r=requests.post(_join(p), data=form, timeout=DEFAULT_TIMEOUT); r.raise_for_status()
    try: return r.json()
    except: return {"text": r.text}

def get_json(p:str):
    try:
        r=requests.get(_join(p), timeout=DEFAULT_TIMEOUT)
        if r.status_code==404: return None
        r.raise_for_status()
        try: return r.json()
        except: return {"text": r.text}
    except requests.RequestException:
        return None

def get_csv_as_df(p:str):
    try: return pd.read_csv(_join(p))
    except: return None

# ---------------- Session state ----------------
if "session_id" not in st.session_state: st.session_state.session_id=str(uuid.uuid4())
if "messages"   not in st.session_state: st.session_state.messages=[]
if "last_reply" not in st.session_state: st.session_state.last_reply=""
if "awaiting_response" not in st.session_state: st.session_state.awaiting_response=False

# ---------------- Tabs ----------------
tab_user, tab_admin = st.tabs(["üë®‚Äçüéì Ng∆∞·ªùi d√πng", "üõ† Qu·∫£n tr·ªã"])

# ---------------- User tab ----------------
with tab_user:
    st.title("ü§ñ Chatbot AI- tr·ª£ l√≠ ·∫£o h·ªó tr·ª£ t∆∞ v·∫•n tuy·ªÉn sinh 10- THPT Marie Curie")

    chat_box = st.container()   # to√†n b·ªô ƒëo·∫°n h·ªôi tho·∫°i ·ªü ƒë√¢y
    with chat_box:
        if not st.session_state.messages:
            with st.chat_message("assistant"):
                st.markdown("CH√†o b·∫°n! m√¨nh l√† chatbot tuy·ªÉn sinh 10, s·∫µn s√†ng gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc c·ªßa b·∫°n. H√£y ƒë·∫∑t c√¢u h·ªèi cho m√¨nh nh√©!")

        # t√¨m ch·ªâ s·ªë c√¢u tr·∫£ l·ªùi assistant cu·ªëi ƒë·ªÉ ƒë·∫∑t n√∫t üëçüëé
        last_ass_idx = None
        for i, m in enumerate(st.session_state.messages):
            if m.get("role") == "assistant":
                last_ass_idx = i

        # render l·ªãch s·ª≠
        for i, msg in enumerate(st.session_state.messages):
            with st.chat_message(msg["role"]):
                st.markdown(msg["content"])
            if i == last_ass_idx:
                # l·∫•y c√¢u h·ªèi li·ªÅn tr∆∞·ªõc
                prev_q = ""
                for j in range(i-1, -1, -1):
                    if st.session_state.messages[j]["role"] == "user":
                        prev_q = st.session_state.messages[j]["content"]; break
                c1, c2, _ = st.columns([0.07, 0.07, 0.86])
                with c1:
                    if st.button("üëç", key=f"fb_up_{i}", help="H√†i l√≤ng"):
                        with suppress(Exception):
                            post_form("/feedback", {
                                "session_id": st.session_state.session_id,
                                "question": prev_q, "answer": msg["content"], "rating": "up"
                            }); st.success("ƒê√£ g·ª≠i ph·∫£n h·ªìi üëç")
                with c2:
                    if st.button("üëé", key=f"fb_dn_{i}", help="Ch∆∞a t·ªët"):
                        with suppress(Exception):
                            post_form("/feedback", {
                                "session_id": st.session_state.session_id,
                                "question": prev_q, "answer": msg["content"], "rating": "down"
                            }); st.success("ƒê√£ g·ª≠i ph·∫£n h·ªìi üëé")

        # n·∫øu ƒëang ch·ªù tr·∫£ l·ªùi: hi·ªán bong b√≥ng thinking ngay ·ªü CU·ªêI cu·ªôc h·ªôi tho·∫°i
        if st.session_state.awaiting_response:
            with st.chat_message("assistant"):
                st.markdown("‚è≥ *ƒêang suy nghƒ©‚Ä¶*")

    # √¥ nh·∫≠p lu√¥n ƒë·∫∑t SAU chat_box -> c√¢u h·ªèi m·ªõi s·∫Ω xu·∫•t hi·ªán ·ªü cu·ªëi (tr√™n √¥ nh·∫≠p)
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

    # b∆∞·ªõc 1: ng∆∞·ªùi d√πng g·ª≠i c√¢u h·ªèi -> th√™m v√†o l·ªãch s·ª≠ & k√≠ch ho·∫°t ch·∫ø ƒë·ªô ch·ªù, r·ªìi rerun
    if user_input:
        st.session_state.messages.append({"role":"user","content": user_input})
        st.session_state.awaiting_response = True
        do_rerun()

# b∆∞·ªõc 2: n·∫øu ƒëang ch·ªù -> g·ªçi backend, th√™m c√¢u tr·∫£ l·ªùi r·ªìi rerun ƒë·ªÉ hi·ªÉn th·ªã ·ªü cu·ªëi
if st.session_state.awaiting_response:
    try:
        data = post_json("/chat", {
            "messages": st.session_state.messages,
            "session_id": st.session_state.session_id
        })
        reply = (data or {}).get("reply") or (data or {}).get("response") or "Xin l·ªói, hi·ªán ch∆∞a c√≥ ph·∫£n h·ªìi."
    except requests.RequestException as e:
        reply = "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi backend. Ki·ªÉm tra BACKEND_URL trong Secrets ho·∫∑c th·ª≠ l·∫°i sau.\n\n" + f"Chi ti·∫øt l·ªói: `{e}`"
    st.session_state.messages.append({"role":"assistant","content": reply})
    st.session_state.last_reply = reply
    st.session_state.awaiting_response = False
    do_rerun()


    if os.getenv("SHOW_DEBUG") == "1":
        st.caption(f"Phi√™n: `{st.session_state.session_id}` ‚Ä¢ Backend: `{BACKEND_URL}` ‚Ä¢ Th·ªùi gian: {datetime.now():%Y-%m-%d %H:%M:%S}")

# ---------------- Admin tab ----------------
with tab_admin:
    st.header("üõ† Khu v·ª±c Qu·∫£n tr·ªã")
    pwd = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã", type="password")
    if pwd != ADMIN_PASSWORD:
        st.info("Nh·∫≠p ƒë√∫ng m·∫≠t kh·∫©u ƒë·ªÉ truy c·∫≠p c√¥ng c·ª• qu·∫£n tr·ªã. ƒê·∫∑t `ADMIN_PASSWORD` trong ENV ho·∫∑c st.secrets.")
        st.stop()

    st.success("ƒêƒÉng nh·∫≠p qu·∫£n tr·ªã th√†nh c√¥ng ‚úÖ")

    st.subheader("‚úÖ Ki·ªÉm tra t√¨nh tr·∫°ng Backend")
    colA, colB = st.columns([1,1])
    with colA:
        if st.button("Ping /health"):
            result = get_json("/health")
            st.write(result if result else "Kh√¥ng g·ªçi ƒë∆∞·ª£c `/health`.")
    with colB: st.write(f"**BACKEND_URL:** `{BACKEND_URL}`")

    st.divider()
    st.subheader("üóÇ L·ªãch s·ª≠ h·ªôi tho·∫°i")
    st.caption("ƒê·ªçc t·ª´ `/history` (JSON) ho·∫∑c `/chat_history.csv` (CSV).")
    tabs_hist = st.tabs(["/history (JSON)", "/chat_history.csv (CSV)"])
    with tabs_hist[0]:
        hist = get_json("/history")
        if isinstance(hist, list) and hist:
            st.dataframe(pd.DataFrame(hist), use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ endpoint `/history` ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c.")
    with tabs_hist[1]:
        df_hist = get_csv_as_df("/chat_history.csv")
        if df_hist is not None:
            st.dataframe(df_hist, use_container_width=True)
        else:
            st.info("Kh√¥ng t√¨m th·∫•y `/chat_history.csv`.")

    st.divider()
    st.subheader("üìù Feedback")
    tabs_fb = st.tabs(["/feedbacks (JSON)", "/feedback.csv (CSV)"])
    with tabs_fb[0]:
        fjson = get_json("/feedbacks")
        if isinstance(fjson, list) and fjson:
            st.dataframe(pd.DataFrame(fjson), use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ endpoint `/feedbacks` ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c.")
    with tabs_fb[1]:
        df_fb = get_csv_as_df("/feedback.csv")
        if df_fb is not None:
            st.dataframe(df_fb, use_container_width=True)
        else:
            st.info("Kh√¥ng t√¨m th·∫•y `/feedback.csv`.")

    st.divider()
    st.subheader("üìà Top 10 c√¢u h·ªèi ƒë∆∞·ª£c h·ªèi nhi·ªÅu nh·∫•t")
    def _load_questions_series() -> Optional[pd.Series]:
        data = get_json("/history")
        df = pd.DataFrame(data) if isinstance(data, list) and data else get_csv_as_df("/chat_history.csv")
        if df is None or df.empty: return None
        for col in ["question","user_input","prompt","text","content"]:
            if col in df.columns:
                s = df[col].dropna().astype(str)
                if "role" in df.columns:
                    try: s = df.loc[df["role"].astype(str).str.lower().eq("user"), col].dropna().astype(str)
                    except: pass
                return s if not s.empty else None
        if {"role","content"}.issubset(df.columns):
            s = df.loc[df["role"].astype(str).str.lower().eq("user"), "content"].dropna().astype(str)
            return s if not s.empty else None
        return None
    s = _load_questions_series()
    if s is None or s.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¢u h·ªèi (c·∫ßn `/history` JSON ho·∫∑c `/chat_history.csv`).")
    else:
        s_norm = s.astype(str).str.strip().str.lower().str.replace(r"\s+"," ", regex=True)
        counts = s_norm.value_counts().head(10)
        rep = {}
        for t in s:
            k=" ".join(str(t).strip().lower().split())
            if k not in rep: rep[k]=str(t).strip()
        df_top = pd.DataFrame({"C√¢u h·ªèi":[rep.get(k,k) for k in counts.index], "S·ªë l·∫ßn":counts.values})
        st.dataframe(df_top, use_container_width=True)
        st.bar_chart(df_top.set_index("C√¢u h·ªèi")["S·ªë l·∫ßn"])

    st.divider()
    st.subheader("‚¨ÜÔ∏è C·∫≠p nh·∫≠t MC_chatbot.csv (tu·ª≥ ch·ªçn)")
    st.caption("Frontend kh√¥ng ghi tr·ª±c ti·∫øp file l√™n server. T·∫°o endpoint `POST /upload_mc_data` ·ªü backend n·∫øu c·∫ßn.")
    up = st.file_uploader("Ch·ªçn file MC_chatbot.csv", type=["csv"])
    if up and st.button("G·ª≠i l√™n backend (/upload_mc_data)"):
        try:
            r = requests.post(_join("/upload_mc_data"),
                              files={"file": ("MC_chatbot.csv", up.getvalue(), "text/csv")},
                              timeout=DEFAULT_TIMEOUT)
            st.success("ƒê√£ g·ª≠i file l√™n backend.") if r.status_code==200 else st.warning(f"Backend tr·∫£ {r.status_code}: {r.text}")
        except requests.RequestException as e:
            st.error(f"L·ªói g·ª≠i file: {e}")
