import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from fastapi import FastAPI, Request, Form
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import pandas as pd
import faiss
import numpy as np
from sentence_transformers import SentenceTransformer
from openai import OpenAI
from deep_translator import GoogleTranslator

# ==== 1. M√¥i tr∆∞·ªùng & m√¥ h√¨nh ====
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)
logger = logging.getLogger("RAG_Chatbot")
logging.basicConfig(level=logging.INFO)

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"]
)

model = SentenceTransformer("all-MiniLM-L6-v2")

class ChatPayload(BaseModel):
    session_id: str
    messages: List[dict]

# ==== 2. Load d·ªØ li·ªáu ====
qa_df = pd.read_csv("MC_chatbot.csv", encoding="utf-8")
questions = qa_df["cauhoi"].tolist()
answers = qa_df["cautraloi"].tolist()

embeddings = model.encode(questions, convert_to_numpy=True)
index = faiss.IndexFlatL2(embeddings.shape[1])
index.add(embeddings)

# ==== 3. Ti·ªán √≠ch ====
def save_chat(session_id: str, role: str, content: str):
    df = pd.DataFrame([{
        "timestamp": datetime.now().isoformat(),
        "session_id": session_id,
        "role": role,
        "content": content
    }])
    df.to_csv("chat_history.csv", mode="a", index=False, header=not os.path.exists("chat_history.csv"), encoding="utf-8")

def save_feedback(session_id: str, question: str, answer: str, rating: str):
    df = pd.DataFrame([{
        "timestamp": datetime.now().isoformat(),
        "session_id": session_id,
        "question": question,
        "answer": answer,
        "rating": rating
    }])
    df.to_csv("feedback.csv", mode="a", index=False, header=not os.path.exists("feedback.csv"), encoding="utf-8")

def detect_language(text: str):
    # C·∫£i thi·ªán: Ki·ªÉm tra th√™m t·ª´ kh√≥a ƒë·ªÉ ch√≠nh x√°c h∆°n
    en_keywords = ["what", "how", "where", "when", "school", "admission", "who", "principal", "gold", "weather", "tomorrow"]
    return "en" if any(w in text.lower() for w in en_keywords) else "vi"

# Dict ƒë·ªÉ d·ªãch ng√†y sang ti·∫øng Vi·ªát
DAY_MAP = {
    'Monday': 'Hai',
    'Tuesday': 'Ba',
    'Wednesday': 'T∆∞',
    'Thursday': 'NƒÉm',
    'Friday': 'S√°u',
    'Saturday': 'B·∫£y',
    'Sunday': 'Ch·ªß Nh·∫≠t'
}

def get_date_info(days_offset=0):
    # T√≠nh ng√†y d·ª±a tr√™n offset (0: h√¥m nay, 1: ng√†y mai, -1: h√¥m qua)
    now = datetime.now() + timedelta(days=days_offset)
    day_en = now.strftime("%A")
    day_vi = DAY_MAP.get(day_en, day_en)
    prefix = "H√¥m nay" if days_offset == 0 else "Ng√†y mai" if days_offset == 1 else "H√¥m qua" if days_offset == -1 else f"Ng√†y {now.day} th√°ng {now.month} nƒÉm {now.year}"
    return f"{prefix} l√† th·ª© {day_vi}, ng√†y {now.day} th√°ng {now.month} nƒÉm {now.year}."

# ==== 4. Truy xu·∫•t context ====
def retrieve_context(query: str, top_k=3):
    q_embed = model.encode([query], convert_to_numpy=True)
    D, I = index.search(q_embed, top_k)
    contexts = [
        f"Q: {questions[i]}\nA: {answers[i]}\n"
        for idx, i in enumerate(I[0])
        if D[0][idx] < 1.0
    ]
    best_score = 1.0 - D[0][0] if len(D[0]) > 0 else 0.0
    return contexts, best_score

# ==== 5. API ====
@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/chat")
async def chat_handler(payload: ChatPayload, request: Request):
    user_input = payload.messages[-1]["content"]
    session_id = payload.session_id
    user_lang = detect_language(user_input)

    try:
        translated_input = GoogleTranslator(source="auto", target="vi").translate(user_input) if user_lang == "en" else user_input
    except:
        translated_input = user_input

    context_chunks, similarity = retrieve_context(translated_input)
    logger.info(f"üîç FAISS similarity = {similarity:.2f}")
    save_chat(session_id, "user", user_input)

    # ==== X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√¢u h·ªèi v·ªÅ th·ªùi gian: L√†m ch√≠nh x√°c h∆°n ====
    lower_input = translated_input.lower()
    if "h√¥m nay" in lower_input or "hi·ªán t·∫°i" in lower_input or "th·ª© m·∫•y h√¥m nay" in lower_input:
        reply = get_date_info(0)  # H√¥m nay
        if user_lang == "en":
            reply = GoogleTranslator(source="vi", target="en").translate(reply)
        save_chat(session_id, "assistant", reply)
        return {
            "response": reply,
            "source": "real_time",
            "similarity": float(round(similarity, 2))
        }
    elif "ng√†y mai" in lower_input or "mai l√† th·ª© m·∫•y" in lower_input:
        reply = get_date_info(1)  # Ng√†y mai
        if user_lang == "en":
            reply = GoogleTranslator(source="vi", target="en").translate(reply)
        save_chat(session_id, "assistant", reply)
        return {
            "response": reply,
            "source": "real_time",
            "similarity": float(round(similarity, 2))
        }
    elif "h√¥m qua" in lower_input or "qua l√† th·ª© m·∫•y" in lower_input:
        reply = get_date_info(-1)  # H√¥m qua
        if user_lang == "en":
            reply = GoogleTranslator(source="vi", target="en").translate(reply)
        save_chat(session_id, "assistant", reply)
        return {
            "response": reply,
            "source": "real_time",
            "similarity": float(round(similarity, 2))
        }

    # ==== 6. Tr·∫£ l·ªùi t·ª´ ki·∫øn th·ª©c n·ªôi b·ªô n·∫øu ƒë·ªß t∆∞∆°ng ƒë·ªìng ====
    if similarity >= 0.85 and context_chunks:  # H·∫° threshold xu·ªëng 0.85 ƒë·ªÉ linh ho·∫°t h∆°n
        top_answer = context_chunks[0].split("A:", 1)[-1].strip()
        reply = GoogleTranslator(source="vi", target="en").translate(top_answer) if user_lang == "en" else top_answer
        save_chat(session_id, "assistant", reply)
        return {
            "response": reply,
            "source": "knowledge_base",
            "similarity": float(round(similarity, 2))
        }

    # ==== 7. Fallback GPT: X·ª≠ l√Ω m·ªçi c√¢u h·ªèi c√≤n l·∫°i, prompt linh ho·∫°t h∆°n nh∆∞ AI tool th√¥ng th∆∞·ªùng ====
    current_date_info = get_date_info(0)  # Lu√¥n cung c·∫•p ng√†y h√¥m nay cho GPT
    prompt = f"{current_date_info}\n\nB·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, th√¢n thi·ªán, gi·ªëng nh∆∞ ChatGPT ho·∫∑c Grok. Lu√¥n s·∫µn s√†ng tr·∫£ l·ªùi b·∫•t k·ª≥ c√¢u h·ªèi n√†o t·ª´ ng∆∞·ªùi d√πng, d√π l√† v·ªÅ gi√°o d·ª•c, th·ªùi gian, gi√° v√†ng, th·ªùi ti·∫øt, ki·∫øn th·ª©c ph·ªï th√¥ng, to√°n h·ªçc, l·ªãch s·ª≠, ho·∫∑c b·∫•t k·ª≥ ch·ªß ƒë·ªÅ g√¨. \nTr·∫£ l·ªùi m·ªôt c√°ch ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß, h·ªØu √≠ch v√† kh√¥ng t·ª´ ch·ªëi y√™u c·∫ßu n·∫øu c√≥ th·ªÉ. S·ª≠ d·ª•ng th√¥ng tin ng√†y hi·ªán t·∫°i ƒë·ªÉ t√≠nh to√°n n·∫øu c·∫ßn (v√≠ d·ª•: n·∫øu h·ªèi ng√†y mai, t√≠nh t·ª´ h√¥m nay).\nN·∫øu c√¢u h·ªèi b·∫±ng ti·∫øng Anh, tr·∫£ l·ªùi b·∫±ng ti·∫øng Anh; n·∫øu b·∫±ng ti·∫øng Vi·ªát, tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.\n\n" + ("\n\n".join(context_chunks) if context_chunks else "")

    messages = [{"role": "system", "content": prompt}] + payload.messages[-3:]

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages
        )
        reply = completion.choices[0].message.content
        # Kh√¥ng c·∫ßn d·ªãch n·ªØa v√¨ prompt y√™u c·∫ßu GPT x·ª≠ l√Ω ng√¥n ng·ªØ tr·ª±c ti·∫øp
    except Exception as e:
        logger.error(f"‚ùå GPT error: {e}")
        reply = "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë khi t·∫°o c√¢u tr·∫£ l·ªùi." if user_lang == "vi" else "Sorry, the system is experiencing an issue generating the response."

    save_chat(session_id, "assistant", reply)
    return {
        "response": reply,
        "source": "rag_gpt",
        "similarity": float(round(similarity, 2))
    }

# ==== 8. Feedback ====
@app.post("/feedback")
async def feedback(
    session_id: str = Form(...),
    question: str = Form(...),
    answer: str = Form(...),
    rating: str = Form(...)
):
    save_feedback(session_id, question, answer, rating)
    return {"status": "ok", "message": "ƒê√£ ghi nh·∫≠n ph·∫£n h·ªìi."}